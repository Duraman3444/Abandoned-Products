# Generated by Django 4.2.16 on 2025-07-21 17:40

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("students", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="AdmissionCheck",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "is_required",
                    models.BooleanField(
                        default=True,
                        help_text="When true, applicant cannot advance past this level without completing this check",
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "ordering": ["level__order", "name"],
            },
        ),
        migrations.CreateModel(
            name="AdmissionLevel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[a-zA-Z0-9\\s\\-]+$", "Must be alphanumeric"
                            )
                        ],
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        help_text="Order in admission process, 1 being first",
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="What happens at this level"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="Applicant",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "applicant_id",
                    models.CharField(blank=True, max_length=20, unique=True),
                ),
                ("first_name", models.CharField(max_length=100)),
                ("middle_name", models.CharField(blank=True, max_length=100)),
                ("last_name", models.CharField(max_length=100)),
                ("preferred_name", models.CharField(blank=True, max_length=100)),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("M", "Male"),
                            ("F", "Female"),
                            ("O", "Other"),
                            ("N", "Prefer not to say"),
                        ],
                        max_length=1,
                    ),
                ),
                (
                    "photo",
                    models.ImageField(
                        blank=True, null=True, upload_to="applicant_photos/"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        help_text="Student's email if available",
                        max_length=254,
                    ),
                ),
                ("street", models.CharField(blank=True, max_length=200)),
                ("city", models.CharField(blank=True, max_length=100)),
                ("state", models.CharField(blank=True, max_length=50)),
                ("zip_code", models.CharField(blank=True, max_length=10)),
                (
                    "current_school_name",
                    models.CharField(
                        blank=True,
                        help_text="If current school not in our feeder list",
                        max_length=200,
                    ),
                ),
                (
                    "living_situation",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("both_parents", "Both Parents"),
                            ("mother", "Mother"),
                            ("father", "Father"),
                            ("guardians", "Guardian(s)"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("decision_date", models.DateField(blank=True, null=True)),
                (
                    "decision_by",
                    models.CharField(
                        blank=True, help_text="Who made the decision", max_length=200
                    ),
                ),
                ("is_ready_for_enrollment", models.BooleanField(default=False)),
                ("is_from_online_inquiry", models.BooleanField(default=False)),
                ("follow_up_date", models.DateField(blank=True, null=True)),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Internal notes about applicant"
                    ),
                ),
                ("special_circumstances", models.TextField(blank=True)),
                (
                    "primary_parent_name",
                    models.CharField(blank=True, editable=False, max_length=200),
                ),
                (
                    "primary_parent_email",
                    models.EmailField(blank=True, editable=False, max_length=254),
                ),
                (
                    "primary_parent_phone",
                    models.CharField(blank=True, editable=False, max_length=20),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "applying_for_grade",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="students.gradelevel",
                    ),
                ),
                (
                    "completed_checks",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Requirements completed by applicant",
                        to="admissions.admissioncheck",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ApplicationDecision",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "is_positive",
                    models.BooleanField(
                        default=True, help_text="Indicates acceptance vs rejection"
                    ),
                ),
                ("order", models.PositiveIntegerField(help_text="Display order")),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="FeederSchool",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200, unique=True)),
                (
                    "school_type",
                    models.CharField(
                        blank=True,
                        help_text="Public, Private, Charter, etc.",
                        max_length=50,
                    ),
                ),
                ("city", models.CharField(blank=True, max_length=100)),
                ("state", models.CharField(blank=True, max_length=50)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="OpenHouse",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("date", models.DateTimeField()),
                ("description", models.TextField(blank=True)),
                ("capacity", models.PositiveIntegerField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "attendees",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Applicants who attended",
                        to="admissions.applicant",
                    ),
                ),
            ],
            options={
                "ordering": ["-date"],
            },
        ),
        migrations.CreateModel(
            name="ContactLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("contact_date", models.DateTimeField(auto_now_add=True)),
                (
                    "contact_type",
                    models.CharField(
                        choices=[
                            ("phone", "Phone Call"),
                            ("email", "Email"),
                            ("meeting", "In-Person Meeting"),
                            ("mail", "Mail"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "contacted_by",
                    models.CharField(
                        help_text="Staff member who made contact", max_length=200
                    ),
                ),
                ("summary", models.TextField(help_text="Summary of communication")),
                ("follow_up_needed", models.BooleanField(default=False)),
                ("follow_up_date", models.DateField(blank=True, null=True)),
                (
                    "applicant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contact_logs",
                        to="admissions.applicant",
                    ),
                ),
            ],
            options={
                "ordering": ["-contact_date"],
            },
        ),
        migrations.AddField(
            model_name="applicant",
            name="current_school",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="admissions.feederschool",
            ),
        ),
        migrations.AddField(
            model_name="applicant",
            name="decision",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="admissions.applicationdecision",
            ),
        ),
        migrations.AddField(
            model_name="applicant",
            name="enrolled_student",
            field=models.OneToOneField(
                blank=True,
                help_text="Student record if applicant was enrolled",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="application",
                to="students.student",
            ),
        ),
        migrations.AddField(
            model_name="applicant",
            name="level",
            field=models.ForeignKey(
                blank=True,
                help_text="Current stage in admission process",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="admissions.admissionlevel",
            ),
        ),
        migrations.AddField(
            model_name="applicant",
            name="parent_guardians",
            field=models.ManyToManyField(
                blank=True,
                help_text="Parent/guardian contacts",
                to="students.emergencycontact",
            ),
        ),
        migrations.AddField(
            model_name="applicant",
            name="school_year",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="students.schoolyear",
            ),
        ),
        migrations.AddField(
            model_name="applicant",
            name="siblings",
            field=models.ManyToManyField(
                blank=True,
                help_text="Current students who are siblings",
                to="students.student",
            ),
        ),
        migrations.AddField(
            model_name="admissioncheck",
            name="level",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="checks",
                to="admissions.admissionlevel",
            ),
        ),
        migrations.AddIndex(
            model_name="applicant",
            index=models.Index(
                fields=["applicant_id"], name="admissions__applica_08347e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="applicant",
            index=models.Index(
                fields=["school_year", "level"], name="admissions__school__4b1695_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="applicant",
            index=models.Index(
                fields=["is_ready_for_enrollment"],
                name="admissions__is_read_329b8d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="applicant",
            index=models.Index(
                fields=["created_at"], name="admissions__created_263dfb_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="admissioncheck",
            unique_together={("name", "level")},
        ),
    ]
